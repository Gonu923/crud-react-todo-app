{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","itemAdd","e","preventDefault","console","log","datas","state","item","refs","value","amount","act","data","push","index","setState","myform","reset","focus","itemRemove","i","splice","itemEdit","title","this","className","ref","type","placeholder","onClick","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sNA4GeA,G,8DAvGb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAYRC,QAAU,SAACC,GACTA,EAAEC,iBACFC,QAAQC,IAAI,OAEZ,IAAIC,EAAQ,EAAKC,MAAMD,MACnBE,EAAO,EAAKC,KAAKD,KAAKE,MACtBC,EAAS,EAAKF,KAAKE,OAAOD,MAE9B,GAAuB,IAAnB,EAAKH,MAAMK,IAAW,CACxB,IAAIC,EAAO,CACTL,OAAMG,UAGRL,EAAMQ,KAAKD,OACN,CACL,IAAIE,EAAQ,EAAKR,MAAMQ,MACvBT,EAAMS,GAAOP,KAAOA,EACpBF,EAAMS,GAAOJ,OAASA,EAKxB,EAAKK,SAAS,CACZV,MAAMA,EACNM,IAAI,IAEN,EAAKH,KAAKQ,OAAOC,QACjB,EAAKT,KAAKD,KAAKW,SAxCC,EA4ClBC,WAAa,SAACC,GACZ,IAAIf,EAAQ,EAAKC,MAAMD,MACvBA,EAAMgB,OAAOD,EAAE,GACf,EAAKL,SAAS,CACZV,MAAMA,IAER,EAAKG,KAAKQ,OAAOC,QACjB,EAAKT,KAAKD,KAAKW,SAnDC,EAsDlBI,SAAW,SAACF,GACV,IAAIR,EAAO,EAAKN,MAAMD,MAAMe,GAC5B,EAAKZ,KAAKD,KAAKE,MAAQG,EAAKL,KAC5B,EAAKC,KAAKE,OAAOD,MAAQG,EAAKF,OAC9B,EAAKK,SAAS,CACZJ,IAAI,EACJG,MAAMM,KA1DR,EAAKd,MAAM,CACTiB,MAAO,iBACPZ,IAAK,EACLG,MAAO,GACPT,MAAO,IANO,E,gEAWhBmB,KAAKhB,KAAKD,KAAKW,U,+BAoDR,IAAD,OACFb,EAAQmB,KAAKlB,MAAMD,MACvB,OACE,yBAAKoB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gCACb,wBAAIA,UAAU,+BAA+BD,KAAKlB,MAAMiB,OACxD,yBAAKE,UAAU,QACb,yBAAKA,UAAU,aACb,0BAAMC,IAAI,UACR,yBAAKD,UAAU,cACb,2BAAOE,KAAK,OAAOD,IAAI,OAAOD,UAAU,+BAA+BG,YAAY,iBACnF,2BAAOD,KAAK,OAAOD,IAAI,SAASD,UAAU,oCAAoCG,YAAY,mBAC1F,4BAAQC,QAAS,SAAC5B,GAAD,OAAK,EAAKD,QAAQC,IAAKwB,UAAU,kCAAlD,gBAKR,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,oCAAd,aAEEpB,EAAMyB,KAAI,SAAClB,EAAMQ,GAAP,OACR,wBAAIW,IAAKX,EAAGK,UAAU,uEACnBb,EAAKL,KADR,IACeK,EAAKF,OADpB,MAEE,yBAAKe,UAAU,SACb,4BAAQI,QAAS,kBAAI,EAAKP,SAASF,KAAI,uBAAGK,UAAU,uBACpD,4BAAQI,QAAS,kBAAI,EAAKV,WAAWC,KAAI,uBAAGK,UAAU,mC,GA1F1DO,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,a","file":"static/js/main.1157baac.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      title: \"React todo app\", \n      act: 0,\n      index: '', \n      datas: []\n    }\n\n  }\n  componentDidMount(){\n    this.refs.item.focus();\n  }\n  itemAdd = (e) =>{\n    e.preventDefault();\n    console.log('Try');\n\n    let datas = this.state.datas;\n    let item = this.refs.item.value;\n    let amount = this.refs.amount.value;\n\n    if (this.state.act === 0) {\n      let data = {\n        item, amount\n      }\n  \n      datas.push(data);\n    } else {\n      let index = this.state.index;\n      datas[index].item = item;      \n      datas[index].amount = amount;      \n    }\n\n    \n\n    this.setState({\n      datas:datas, \n      act:0\n    });\n    this.refs.myform.reset();\n    this.refs.item.focus();\n\n    \n  }\n  itemRemove = (i) => {\n    let datas = this.state.datas;\n    datas.splice(i,1);\n    this.setState({\n      datas:datas\n    });\n    this.refs.myform.reset();\n    this.refs.item.focus();\n  }\n\n  itemEdit = (i) =>{\n    let data = this.state.datas[i];\n    this.refs.item.value = data.item;\n    this.refs.amount.value = data.amount;\n    this.setState({\n      act:1,\n      index:i\n    });\n  }\n  render(){\n    let datas = this.state.datas;\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-center text-capitalize\">{this.state.title}</h3>\n            <div className=\"card\" >\n              <div className=\"card-body\">\n                <form ref=\"myform\">\n                  <div className=\"form-group\">\n                    <input type=\"text\" ref=\"item\" className=\"form-control text-capitalize\" placeholder=\"Add new item\"/>\n                    <input type=\"text\" ref=\"amount\" className=\"form-control text-capitalize mt-2\" placeholder=\"Amount of item\"/>\n                    <button onClick={(e)=>this.itemAdd(e)}  className=\"btn btn-block btn-success my-2\">Add Item</button>\n                  </div>\n                </form>\n              </div>\n            </div>  \n            <ul className=\"list-group\">\n              <h3 className=\"text-center text-capitalize mt-5\">Todo list</h3>\n              {\n                datas.map((data, i)=>\n                  <li key={i} className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\n                    {data.item}-{data.amount} kg\n                    <div className=\"icons\">\n                      <button onClick={()=>this.itemEdit(i)}><i className=\"fas fa-pencil-alt\"></i></button>\n                      <button onClick={()=>this.itemRemove(i)}><i className=\"fas fa-trash-alt\"></i></button>\n                    </div>\n                  </li>\n                )\n              }\n            </ul>          \n          </div>  \n        </div>        \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}